@rendermode InteractiveServer

@using Organization.Client.Components.Pages
@using Organization.Client.Models
@using System.Collections

@inject IJSRuntime jsRuntime

<ol>
    @foreach (CompanyModel company in Organization.Companies.OrderBy(company => company.Index))
    {
        <li id="@company.Id" draggable="true" dropzone="move"
            ondragover="event.preventDefault()"
            @ondragend="() => OnDragEndHandler()"
            @ondrop="() => OnTargetDropHandler(company)"
            @ondragstart="() => OnDragStartHandler(company)">

            <h5 ondragover="event.preventDefault()" dropzone="move" 
                @ondrop="() => OnZoneDropHandler(company)"
                >[@company.Id]@company.Name</h5>

            <CascadingValue Value="this">
                <CompanyItem Company="company" />
            </CascadingValue>
        </li>
    }
</ol>

@code {
    private HttpClient _httpClient = new HttpClient();
    private BusinessUnitModel _targetBusinessUnitToReplace = null;
    private List<BusinessUnitModel> _multipleDraggableBusinessUnits = new List<BusinessUnitModel>();

    [CascadingParameter] public Viewer ParentComponent { get; set; }
    [Parameter] public OrganizationModel Organization { get; set; }

    public void SetReplaceTargetBusinessUnit(BusinessUnitModel model) => _targetBusinessUnitToReplace = model;

    public void ResetReplaceTargetBusinessUnit() => _targetBusinessUnitToReplace = null;

    public async Task ReplaceTargetBusinessUnit(BusinessUnitModel model)
    {
        if (_targetBusinessUnitToReplace != null)
        {
            if (_targetBusinessUnitToReplace.Id == model.Id)
            {
                return;
            }

            ReplaceBusinessUnits(_targetBusinessUnitToReplace, model);

            await NotifyAboutBusinessUnitChanged(_targetBusinessUnitToReplace);
            await NotifyAboutBusinessUnitChanged(model);

            _targetBusinessUnitToReplace = null;
        }
    }

    public void SelectMultipleraggableBusinessUnit(BusinessUnitModel model)
    {
        if ((_multipleDraggableBusinessUnits.Count == 0) ||
            (model.CompanyFk == _multipleDraggableBusinessUnits.First().CompanyFk))
        {
            _multipleDraggableBusinessUnits.Add(model);

            model.IsSelected = true;
            return;
        }

        model.IsSelected = false;
        return;
    }

    public void RemoveFromMultipleraggableBusinessUnit(BusinessUnitModel model)
    {
        if (_multipleDraggableBusinessUnits.Contains(model))
        {
            _multipleDraggableBusinessUnits.Remove(model);
            model.IsSelected = false;
        }
    }

    protected override void OnInitialized()
    {
        foreach (CompanyModel company in Organization.Companies)
        {
            company.Organization = Organization;            
        }
    }

    private void OnDragStartHandler(CompanyModel model)
    {
        if (_targetBusinessUnitToReplace == null)
        {
            ParentComponent.SetReplaceTargetCompany(model);
        }
    }

    private void ReplaceBusinessUnits(BusinessUnitModel target, BusinessUnitModel draggable)
    {
        int temp = target.Index;
        target.Index = draggable.Index;
        draggable.Index = temp;

        long t = target.CompanyFk;
        target.CompanyFk = draggable.CompanyFk;
        draggable.CompanyFk = t;

        draggable.Company.BusinessUnits.Remove(draggable);
        draggable.Company.BusinessUnits.Add(target);
        draggable.Company.BusinessUnits = draggable.Company.BusinessUnits.OrderBy(bu => bu.Index).ToList();

        target.Company.BusinessUnits.Remove(target);
        target.Company.BusinessUnits.Add(draggable);
        target.Company.BusinessUnits = target.Company.BusinessUnits.OrderBy(bu => bu.Index).ToList();

        CompanyModel tempCompany = target.Company;
        target.Company = draggable.Company;
        draggable.Company = tempCompany;
    }

    private async void OnZoneDropHandler(CompanyModel model)
    {
        if (_targetBusinessUnitToReplace != null)
        {
            if (_multipleDraggableBusinessUnits.Contains(_targetBusinessUnitToReplace))
            {
                DragMultiple(model);
            }
            else
            {
                await DragOnlyOne(model);
            }
        }
    }

    private async Task DragOnlyOne(CompanyModel model)
    {
        _targetBusinessUnitToReplace.Company.BusinessUnits.Remove(_targetBusinessUnitToReplace);
        _targetBusinessUnitToReplace.Company = model;
        _targetBusinessUnitToReplace.CompanyFk = model.Id;
        _targetBusinessUnitToReplace.Index = model.BusinessUnits.Count;
        model.BusinessUnits.Add(_targetBusinessUnitToReplace);

        await NotifyAboutBusinessUnitChanged(_targetBusinessUnitToReplace);

        _targetBusinessUnitToReplace = null;
    }

    private async void DragMultiple(CompanyModel model)
    {
        if (model.Id == _multipleDraggableBusinessUnits.First().CompanyFk)
        {
            return;
        }

        foreach (BusinessUnitModel bu in _multipleDraggableBusinessUnits)
        {
            bu.Company.BusinessUnits.Remove(bu);
            bu.CompanyFk = model.Id;
            bu.Company = model;
            bu.Index = model.BusinessUnits.Count;
            model.BusinessUnits.Add(bu);
        }

        UnselectAllBusinessUnits(_multipleDraggableBusinessUnits);

        await SyncIndexes(model);
        await SyncIndexes(_multipleDraggableBusinessUnits.First().Company);

        _multipleDraggableBusinessUnits.Clear();
        _targetBusinessUnitToReplace = null;
    }

    private async Task SyncIndexes(CompanyModel company)
    {
        for (int i = company.BusinessUnits.Count - 1; i >= 0; i--)
        {
            company.BusinessUnits[i].Index = i;
        }

        await NotifyAboutBusinessUnitChangedMultiple(company.BusinessUnits);
    }

    private void UnselectAllBusinessUnits(List<BusinessUnitModel> units)
    {
        foreach (BusinessUnitModel unit in units)
        {
            unit.IsSelected = false;
        }
    }

    private async Task NotifyAboutBusinessUnitChanged(BusinessUnitModel model)
    {
        HttpResponseMessage response = await _httpClient.PostAsJsonAsync("https://localhost:7060/api/businessunit/update", new UpdateBusinessUnitModel()
        {
            Id = model.Id,
            Index = model.Index,
            Name = model.Name,
            CompanyFk = model.CompanyFk,
        });

        if (!response.IsSuccessStatusCode)
        {
            // TODO
        }
    }

    private async Task NotifyAboutBusinessUnitChangedMultiple(List<BusinessUnitModel> models)
    {
        var vm = new { BusinessUnits = new List<UpdateBusinessUnitModel>() };
        foreach (BusinessUnitModel model in models)
        {
            vm.BusinessUnits.Add(new UpdateBusinessUnitModel()
            {
                Id = model.Id,
                CompanyFk = model.CompanyFk,
                Index = model.Index,
                Name = model.Name,
            });
        }

        HttpResponseMessage response = await _httpClient.PostAsJsonAsync("https://localhost:7060/api/businessunit/UpdateMany", vm);
        if (!response.IsSuccessStatusCode)
        {
            // TODO
        }
    }

    private void OnDragEndHandler() => ParentComponent.ResetReplacetargetCompany();

    private void OnTargetDropHandler(CompanyModel model) => ParentComponent.ReplaceTargetCompany(model);

    private class UpdateBusinessUnitModel
    {
        public long Id { get; set; }
        public int Index { get; set; }
        public string Name { get; set; }
        public long CompanyFk { get; set; }
    }
}