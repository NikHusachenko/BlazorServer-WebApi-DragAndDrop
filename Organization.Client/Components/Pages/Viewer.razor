@page "/viewer"
@rendermode InteractiveServer

@using Microsoft.AspNetCore.SignalR
@using Microsoft.AspNetCore.SignalR.Client
@using Newtonsoft.Json
@using Organization.Client.Components.Controls
@using Organization.Client.Models

<div class="row">
    @foreach (OrganizationModel organization in _organizations)
    {
        <div class="col-md">
            <CascadingValue Value="this">
                <h5 dropzone="move" ondragover="event.preventDefault()"
                    @ondrop="async () => await OnZoneDropHandler(organization)">[@organization.Id]@organization.Name</h5>

                <OrganizationItem Organization="organization" />
            </CascadingValue>
        </div>
    }
</div>

@code {
    private HttpClient _httpClient = new HttpClient();
    private OrganizationModel[] _organizations = new OrganizationModel[0];

    private CompanyModel _targetCompany = null;

    public void SetReplaceTargetCompany(CompanyModel company) => _targetCompany = company;

    public void ResetReplacetargetCompany() => _targetCompany = null;

    public async Task ReplaceTargetCompany(CompanyModel model)
    {
        if (_targetCompany != null)
        {
            if (model.Id == _targetCompany.Id)
            {
                return;
            }

            ReplaceCompanies(_targetCompany, model);

            await SyncIndexes(_targetCompany.Organization);
            await SyncIndexes(model.Organization);

            _targetCompany = null;
        }
    }

    private void ReplaceCompanies(CompanyModel target, CompanyModel draggable)
    {
        int temp = target.Index;
        target.Index = draggable.Index;
        draggable.Index = temp;

        long t = target.OrganizationFk;
        target.OrganizationFk = draggable.OrganizationFk;
        draggable.OrganizationFk = t;

        draggable.Organization.Companies.Remove(draggable);
        draggable.Organization.Companies.Add(target);
        draggable.Organization.Companies = draggable.Organization.Companies.OrderBy(company => company.Index).ToList();

        target.Organization.Companies.Remove(target);
        target.Organization.Companies.Add(draggable);
        target.Organization.Companies = target.Organization.Companies.OrderBy(company => company.Index).ToList();

        OrganizationModel tempOrganization = target.Organization;
        target.Organization = draggable.Organization;
        draggable.Organization = tempOrganization;
    }

    public async Task NotifyAboutCompanyChange(CompanyModel model)
    {
        HttpResponseMessage response = await _httpClient.PostAsJsonAsync("https://localhost:7060/api/company/update", new
        {
            Id = model.Id,
            Index = model.Index,
            Name = model.Name,
            OrganizationFk = model.OrganizationFk
        });

        if (!response.IsSuccessStatusCode)
        {
            // TODO
        }
    }

    public async Task NotifyAboutCompanyChangeMany(List<CompanyModel> models)
    {
        var vm = new { Companies = new List<CompanyPostModel>() };
        foreach (CompanyModel model in models)
        {
            vm.Companies.Add(new CompanyPostModel()
            {
                Id = model.Id,
                Index = model.Index,
                Name = model.Name,
                OrganizationFk = model.OrganizationFk,
            });
        }

        HttpResponseMessage response = await _httpClient.PostAsJsonAsync("https://localhost:7060/api/company/updatemany", vm);

        if (!response.IsSuccessStatusCode)
        {
            // TODO
        }
    }

    private async Task OnZoneDropHandler(OrganizationModel model)
    {
        if (_targetCompany != null)
        {
            if (model.Id == _targetCompany.OrganizationFk)
            {
                _targetCompany.Index = _targetCompany.Organization.Companies.Max(comp => comp.Index) + 1;
            }
            else
            {
                _targetCompany.Organization.Companies.Remove(_targetCompany);
                _targetCompany.OrganizationFk = model.Id;
                _targetCompany.Organization = model;
                _targetCompany.Index = model.Companies.Count == 0 ? 0 : model.Companies.Max(comp => comp.Index) + 1;
                model.Companies.Add(_targetCompany);
            }

            await SyncIndexes(model);

            _targetCompany = null;
        }
    }

    private async Task SyncIndexes(OrganizationModel organization)
    {
        organization.Companies = organization.Companies.OrderBy(comp => comp.Index).ToList();
        for (int i = organization.Companies.Count - 1; i >= 0; i--)
        {
            organization.Companies[i].Index = i;
        }
        await NotifyAboutCompanyChangeMany(organization.Companies);
    }

    protected async override Task OnInitializedAsync()
    {
        HttpResponseMessage response = await _httpClient.GetAsync("https://localhost:7060/Organizations");
        if (response.IsSuccessStatusCode)
        {
            string jsonMessage = await response.Content.ReadAsStringAsync();
            _organizations = JsonConvert.DeserializeObject<OrganizationModel[]>(jsonMessage, new JsonSerializerSettings()
            {
                ReferenceLoopHandling = ReferenceLoopHandling.Ignore,
            });
        }

        // HubConnection hubConnection = new HubConnectionBuilder()
        //     .WithUrl("https://localhost:7060/setvalue")
        //     .Build();

        // await hubConnection.StartAsync();
        // hubConnection.On<PostModel>("UpdateValue", async (newObject) =>
        // {
        //     _chageNotify = newObject.NumberValue.ToString();
        //     await InvokeAsync(StateHasChanged);
        // });

        // StateHasChanged();
    }

    private class CompanyPostModel
    {
        public long Id { get; set; }
        public int Index { get; set; }
        public string Name { get; set; }
        public long OrganizationFk { get; set; }
    }
}